<?xml version="1.0"?>
<component>
	<?component error="true" debug="true"?>
	<registration
		progid="Brackets"
		description="A powerful Functional Programming Library for VBScript."
		version="1.00"
		classid="{20011228-5218-767e-8d85-632171029011}"
	/>
	<public>
		<method name="Set">
			<PARAMETER name="varVariable"/>
			<PARAMETER name="varValue"/>
		</method>
		<method name="If">
			<PARAMETER name="boolCondition"/>
			<PARAMETER name="varTrue"/>
			<PARAMETER name="varFalse"/>
		</method>
		<method name="Lambda">
			<PARAMETER name="strParameters"/>
			<PARAMETER name="strBody"/>
			<PARAMETER name="strBindings"/>
			<PARAMETER name="arrBindings"/>
		</method>
		<method name="Function" internalName="BuildFunction">
			<PARAMETER name="strParameters"/>
			<PARAMETER name="strBody"/>
		</method>
		<method name="Assert">
			<PARAMETER name="boolCondition"/>
			<PARAMETER name="strSource"/>
			<PARAMETER name="strDescription"/>
		</method>
		<method name="Range">
			<PARAMETER name="numStart"/>
			<PARAMETER name="numStop"/>
			<PARAMETER name="numStep"/>
		</method>
		<method name="Map">
			<PARAMETER name="varFunction"/>
			<PARAMETER name="varSet"/>
		</method>
		<method name="ForEach">
			<PARAMETER name="varSubprogram"/>
			<PARAMETER name="varSet"/>
		</method>
		<method name="Apply">
			<PARAMETER name="varFunction"/>
			<PARAMETER name="varArguments"/>
		</method>
		<method name="CArray">
			<PARAMETER name="varSet"/>
		</method>
		<method name="Filter">
			<PARAMETER name="varFunction"/>
			<PARAMETER name="varSet"/>
		</method>
		<method name="Accumulate">
			<PARAMETER name="varFunction"/>
			<PARAMETER name="varSet"/>
			<PARAMETER name="varInitialValue"/>
		</method>
		<method name="Reduce">
			<PARAMETER name="varFunction"/>
			<PARAMETER name="varSet"/>
			<PARAMETER name="varInitialValue"/>
		</method>
		<method name="GetObject" internalName="GetCOMObject">
			<PARAMETER name="strProgID"/>
		</method>
		<method name="Append">
			<PARAMETER name="varSet1"/>
			<PARAMETER name="varSet2"/>
		</method>
		<method name="Flatten">
			<PARAMETER name="arrNested"/>
		</method>
		<method name="Unless">
			<PARAMETER name="boolPredicate"/>
			<PARAMETER name="varSubprogram"/>
		</method>
		<method name="Times">
			<PARAMETER name="varSubprogram"/>
			<PARAMETER name="lngTimes"/>
		</method>
		<method name="Every">
			<PARAMETER name="arrArguments"/>
			<PARAMETER name="varFunction"/>
		</method>
		<method name="Some">
			<PARAMETER name="arrArguments"/>
			<PARAMETER name="varFunction"/>
		</method>
		<method name="Once">
			<PARAMETER name="varFunction"/>
		</method>
		<method name="Min">
			<PARAMETER name="numA"/>
			<PARAMETER name="numB"/>
		</method>
		<method name="Max">
			<PARAMETER name="numA"/>
			<PARAMETER name="numB"/>
		</method>
		<method name="Zip">
			<PARAMETER name="varLeft"/>
			<PARAMETER name="varRight"/>
		</method>
	</public>
	<script language="JScript" src="./Brackets.js" />
	<script language="VBScript" src="./Brackets.vbs" />
	<script language="VBScript">
		<![CDATA[
			Option Explicit
			Private []
			Set [] = New Brackets

			Public Sub [Set](ByRef varVariable, varValue)
				[].[Set] varVariable, varValue
			End Sub

			Public Function [If](boolCondition, varTrue, varFalse)
				[Set] [If], [].If(boolCondition, varTrue, varFalse)
			End Function

			Public Function Lambda(strParameters, strBody, strBindings, arrBindings)
				[Set] Lambda, [].Lambda(strParameters, strBody, strBindings, arrBindings)
			End Function

			Public Function BuildFunction(strParameters, strBody)
				[Set] BuildFunction, [].Function(strParameters, strBody)
			End Function

			Public Sub Assert(boolCondition, strSource, strDescription)
				[].Assert boolCondition, strSource, strDescription
			End Sub

			Public Function Range(numStart, numStop, numStep)
				[Set] Range, [].Range(numStart, numStop, numStep)
			End Function

			Public Function Map(varFunction, varSet)
				[Set] Map, [].Map(varFunction, varSet)
			End Function

			Public Sub ForEach(ByVal varSubprogram, ByRef varSet)
				[].ForEach varSubprogram, varSet
			End Sub

			Public Function Apply(varFunction, varArguments)
				[Set] Apply, [].Apply(varFunction, varArguments)
			End Function

			Public Function CArray(varSet)
				[Set] CArray, [].CArray(varSet)
			End Function

			Public Function Filter(varFunction, varSet)
				[Set] Filter, [].Filter(varFunction, varSet)
			End Filter

			Public Function Accumulate(varFunction, varSet, varInitialValue)
				[Set] Accumulate, [].Accumulate(varFunction, varSet, varInitialValue)
			End Function

			Public Function Reduce(varFunction, varSet, varInitialValue)
				[Set] Reduce, [].Reduce(varFunction, varSet, varInitialValue)
			End Function

			Public Function GetCOMObject(strProgID)
				[Set] GetCOMObject, [].GetObject(strProgID)
			End Function
			
			Public Function Append(varSet1, varSet2)
				[Set] Append, [].Append(varSet1, varSet2)
			End Function

			Public Function Flatten(arrNested)
				[Set] Flatten, [].Flatten(arrNested)
			End Function

			Public Sub Unless(boolPredicate, varSubprogram)
				[].Unless boolPredicate, varSubprogram
			End Sub

			Public Sub Times(varSubprogram, lngTimes)
				[].Times varSubprogram, lngTimes
			End Sub

			Public Function Every(arrArguments, varFunction)
				[Set] Every, [].Every(arrArguments, varFunction)
			End Function

			Public Function Some(arrArguments, varFunction)
				[Set] Some, [].Some(arrArguments, varFunction)
			End Function

			Public Function Once(varFunction)
				[Set] Once, [].Once(varFunction)
			End Function

			Public Function Min(numA, numB)
				[Set] Min, [].Min(numA, numB)
			End Function

			Public Function Max(numA, numB)
				[Set] Max, [].Max(numA, numB)
			End Function

			Public Function Zip(varLeft, varRight)
				[Set] Zip, [].Zip(varLeft, varRight)
			End Function
		]]>
	</script>
</component>
